#+SETUPFILE: ../../styles/readtheorg.setup
#+TITLE: System Design

* System Design Cheatsheet
** Basic Steps
*** Scoping

Clarify and agree on the scope of the system.

#+ATTR_HTML: :class no-border
| *User cases*  | Who is going to use it?                                 |
|               | How (as a sequence of events) are they going to use it? |
|---------------+---------------------------------------------------------|
| *Constraints* | Traffic: requests per second, requests types etc.       |
|               | Data handling: data input/output per second etc.        |
|               | Multithreading etc.                                     |

*** Abstract Design

Sktech high level architecture of important components and connections between them. For example:

- Load balancer
- Application layer (web server)
- Data storage layer (master/slave, database cluster etc.)
- Caching layer
- Other services

*** Component Design

#+ATTR_HTML: :class no-border
| *APIs*            |                                                                  |
|-------------------+------------------------------------------------------------------|
| *OO*              | Map features to modules/classes.                                 |
|                   | Relations and patterns: singleton, composition, inheritance etc. |
|-------------------+------------------------------------------------------------------|
| *Database schema* |                                                                  |

*** Bottlenecks

Identify and mitigate bottlenecks. E.g.

- Bottleneck: data volume is too large ot database is too slow.
- Mitigation: Distribute data on multiple machines, or add in-memory caching.

*** Scaling

#+ATTR_HTML: :class no-border
| *Vertical*   |                                   |
|--------------+-----------------------------------|
| *Horizontal* | Caching                           |
|              | Load balancing                    |
|              | Database partitioning, map-reduce |

** Key Topics
*** Platform

Separating the backend into application layer and platform layer. The platform layer provides low-level services, such as caching and APIs, to the application layer. Advantages:

- Application layer and platform layer can scale independently. Platform layer scales up when there is a new service, e.g. a new API endpoint.
- Platform layer can be reused to support multiple products, e.g. a web application and a mobile app.

file:../images/system_design/01.png

*** Load Balancing

#+ATTR_HTML: :class no-border
| *Smart client*           | Client-side load balancing, more difficult to use. |
|--------------------------+----------------------------------------------------|
| *Hardware load balancer* | Reliable but expensive.                            |
|--------------------------+----------------------------------------------------|
| *Software load balancer* | Most used.                                         |

*** Caching

Caching generally refers to in-memory caches, such as Memcached and Redis.

#+ATTR_HTML: :class no-border
| *Application caching* | Check if a key exists in cache. If not, retrieve from database.                          |
|-----------------------+------------------------------------------------------------------------------------------|
| *Database caching*    | Database's default config usually provides some degree of caching.                       |
|                       | There are more advanced optimizations, such as MySQL InnoDB buffer pool and query cache. |

Caching strategies:

#+ATTR_HTML: :class no-border
| *Pre-calculation* | Pre-calculate expensive data and store in cache. |
|                   | E.g. suggestion data, aggregation data.          |
|-------------------+--------------------------------------------------|
| *Hot data*        | Store more frequently used data in faster cache. |

*** Database

#+ATTR_HTML: :class no-border
| *Replication*  | Replicating changes between distributed databases to synchronize data.                             |
|----------------+----------------------------------------------------------------------------------------------------|
| *Partitioning* | Decomposing data tables vertically (column-wise) or horizontally (row-wise, also called sharding). |
|----------------+----------------------------------------------------------------------------------------------------|
| *Map-reduce*   | Map-reduce layer makes it possible to perform intensive operations in a reasonable amount of time. |
|                | E.g.  calculating suggested users in a social graph, or generating analytics reports.              |

*** Concurrency

#+ATTR_HTML: :class no-border
| *Threads*     |                                                                                                                  |
|---------------+------------------------------------------------------------------------------------------------------------------|
| *Deadlock*    |                                                                                                                  |
|---------------+------------------------------------------------------------------------------------------------------------------|
| *Starvation*  | When a process is perpetually denied necessary resources to process its work.                                    |
|---------------+------------------------------------------------------------------------------------------------------------------|
| *Coherence*   | When multiple processes access the same memory location, they should always get the most recently updated value. |
|---------------+------------------------------------------------------------------------------------------------------------------|
| *Consistency* | Constraints of a shared address space on the order in which memory operations must be performed.                 |
|               | When processes all follow this order to access memory locations, deadlock and incoherent data can be avoided.    |

*** Networking

#+ATTR_HTML: :class no-border
| *Latency*    | The time taken for a packet to be transferred across a network.     |
|--------------+---------------------------------------------------------------------|
| *Throughput* | The quantity of data being sent and received within a unit of time. |

file:../images/system_design/02.jpg

file:../images/system_design/03.png
 
*** Real-World Performance

|          | *Randome access* | *Read 1MB sequentially* |
|----------+------------------+-------------------------|
| *Memory* | 0.0001ms         | 0.003ms                 |
|----------+------------------+-------------------------|
| *SSD*    | 0.016ms          | 0.049ms                 |
|----------+------------------+-------------------------|
| *Disk*   | 2ms              | 0.825ms                 |

| Send 1MB over network         | 0.022ms  |
|-------------------------------+----------|
| Packet in same data center    | 0.5ms    |
|-------------------------------+----------|
| Packet from CA to Netherlands | 75ms     |

1s = 1,000ms (millisecond) = 1,000,000Î¼s (microsecond) = 1,000,000,000ns (nanosecond)

*** Availability & Reliability

#+ATTR_HTML: :class no-border
| *Single point of failure* |   |

** Web System Design Topics

#+ATTR_HTML: :class no-border
| *Security*                     | CORS                                                                                                |
|--------------------------------+-----------------------------------------------------------------------------------------------------|
| *Search*                       | Full-text search engines that use indexes for better performance, e.g. Sphinx, Lucene, Solr         |
|--------------------------------+-----------------------------------------------------------------------------------------------------|
| *Service workers*              | Scripts browser run in the background, for features that don't need a web page or user interaction. |
|                                | E.g. push notifications, background sync.                                                           |
|--------------------------------+-----------------------------------------------------------------------------------------------------|
| *Web workers*                  | Scripts ran in background thread, to perform tasks without interfering with the UI.                 |
|                                | They can perform I/O using =XMLHttpRequest= and sending messages to JS event handlers.              |
|--------------------------------+-----------------------------------------------------------------------------------------------------|
| *Server/Client side rendering* | Server side rendering: full page reloads, more requests, slower rendering.                          |
|                                | Client side rendering: partial reloads (Ajax), less requests, faster rendering.                     |
|--------------------------------+-----------------------------------------------------------------------------------------------------|
| *CDN*                          |                                                                                                     |
|--------------------------------+-----------------------------------------------------------------------------------------------------|
| *Lazy loading*                 |                                                                                                     |

** Links

1. [[https://gist.github.com/vasanthk/485d1c25737e8e72759f][System Design Cheatsheet]]

* Messenger Service
** Features

Talk about features needed, from basic to advanced, e.g.

#+ATTR_HTML: :class no-border
| *Content types* | Text, image, voice, video    |
|-----------------+------------------------------|
| *Modes*         | 1-on-1, group                |
|-----------------+------------------------------|
| *Clients*       | Web, mobile                  |
|-----------------+------------------------------|
| *States*        | Sent, delivered, read        |
|-----------------+------------------------------|
| *History*       | How long is the history kept |

*Architecture can be derived from features.*

** High-level Architecture

In the most basic scenario, there are 2 clients and 1 server.

Message sent from one client should be stored on the server, because the other client may not be online and the message cannot be lost. So the actual message sending is asynchronized.

The server is the bottleneck of the service. It should be horizontally scalable.

When there are multiple servers, clients should be able to connect to different servers while being in the same conversation.

** Low-level Architecture

*Once the high-level architecture is clear, drill down to the design and functions of a single server node.*

Messages sent to the servers should be stored in queues. When the receiver comes online, the messages are retrieved from the queue, can then can be deleted.

Because each time a client sends a message, it may connect to different servers (therefore stored in different queues), when the receicer retrieves the messages, they may be in an arbitrary order (assuming the timestamps on the messages are not precise enough).

** States

1. Sender sends a message to a server.
2. Server responds with a =sent= message.
3. Receiver retrieves the message.
4. Server sends (server initiates the connection) a =delivered= message to the sender.
5. Receiver reads the message.
6. Receiver sends a =read= message (can be implemented as a special type of message that works the same way behind the scene as a normal text message) to the sender via a server (can be a different server).
7. Sender retrieves the =read= message.

** Push Notification

Push notification is usually platform-dependent, and there are existing services that can be used directly, such as Google Cloud Messenging. Push notifications usually work in fire-and-forget manners.

There can be a layer of servers that are dedicated to push notification processing. Once a normal server receives a message, it can request one of these servers to handle the push notification.

** More Topics

- Other features: group chat, message history etc.
- Scaling
- Caching
- Database sharding, replication
- Monitoring

** Links

1. [[https://www.youtube.com/watch?v=5m0L0k8ZtEs][System Design: Messenger service like Whatsapp or WeChat]]
