#+SETUPFILE: ../../styles/readtheorg.setup
#+TITLE: Yaf

* 应用

- =Yaf_Application= :: 代表一个产品、项目，是 Yaf 运行的主导者。\\
                       负责：接收请求、协调路由、分发、执行、输出。

=Yaf_Application= 为单例模式。

#+CAPTION: 程序入口（ =/public/index.php= =/public/api.php= ），初始化实例
#+BEGIN_SRC php
$app = new Yaf_Application(APP_PATH . '/config/application.ini');
$app->...
#+END_SRC

#+CAPTION: 其他位置，获取实例
#+BEGIN_SRC php
$app = Yaf_Application::app();
$app->...
#+END_SRC

** 方法
*** =__construct()=

#+BEGIN_SRC php
__construct( mixed $config, string $section )
    $config  // string：配置文件路径
             // array：详细配置，关联数组，eg. ['ap' => ['directory' => '/usr/local/www/ap']]
             // Yaf_Config_Abstract
    $section // 要读取的配置节，eg. 'ap.environ'
#+END_SRC

#+CAPTION: 示例
#+BEGIN_SRC php
$app = new Yaf_Application(APP_PATH . '/config/application.ini');
#+END_SRC

*** =app()=

- 静态方法
- 返回当前的 =Yaf_Application= 实例

示例
#+BEGIN_SRC php
$app = Yaf_Application::app();
#+END_SRC

*** =bootstrap()=

- 执行 =Bootstrap= 类（默认 =ap.directory/Bootstrap.php= ）中所有 =_init= 开头的方法
- 一般用于在处理请求之前，进行个性化定制
- 返回 =Yaf_Application=

示例
#+BEGIN_SRC php
$app->bootstrap()->run();
#+END_SRC

*** =run()=

- 运行一个 =Yaf_Application= ，开始接受并处理请求
- 只能调用一次，多次调用并不会有特殊效果
- 返回 =bool=

示例
#+BEGIN_SRC php
$app->bootstrap()->run();
#+END_SRC

*** =environ()=

- 获取当前 =Yaf_Application= 环境名
- 相当于 =ini_get('yaf.environ')=
- 返回 =string=

示例
#+BEGIN_SRC php
$env = Yaf_Application::app()->environ();
#+END_SRC

*** =getConfig()=

- 获取 =Yaf_Application= 读取的配置项
- 返回 =Yaf_Config_Abstract=

示例
#+BEGIN_SRC php
$config = Yaf_Application::app()->getConfig();
#+END_SRC

*** =getDispatcher()=

- 获取当前的分发器
- 返回 =Yaf_Dispatcher=

示例
#+BEGIN_SRC php
$app->getDispatcher()->setAppDirectory(APPLICATION_PATH . '/action/');
#+END_SRC

*** =getModules()=

- 获取在配置文件中声明的模块
- 返回 =string=

示例
#+BEGIN_SRC php
print_r($app->getModules());
#+END_SRC

*** =execute()=

- 运行一个用户自定义函数过程
- 主要用于使用 Yaf 做简单的命令行脚本，应用 Yaf 的外围环境，eg. 自动加载、配置、视图引擎
- 返回 =mixed= ，被调用函数、方法的返回值

#+BEGIN_SRC php
execute( callback $function, mixed $parameter = NULL ... )
    $function  // 要运行的函数、方法，eg. array($obj, 'method_name')
    $parameter // 零个或多个要传递给函数的参数
#+END_SRC

示例
#+BEGIN_SRC php
$app->execute('main');
function main() {}
#+END_SRC

* 启动

- =Yaf_Bootstrap_Abstract=
- 一段引导、入口程序，提供定制 =Yaf_Application= 的最早的时机
- 本身没有定义方法

** =_init= 方法

- 继承 =Yaf_Bootstrap_Abstract= 类中的以 =_init= 开头的方法
- 会在 =Yaf_Application::bootstrap()= 时被调用，调用顺序和方法的定义顺序相同
- 都可以接受一个 =Yaf_Dispatcher= 参数

* 分发

- =Yaf_Dispatcher=
- 实现 MVC 中的 C 分发，协调路由来的请求，分发、执行发现的动作
- 收集动作产生的响应，输出响应给请求者，并在整个过程完成以后返回响应
- 由 =Yaf_Application= 初始化，然后由 =Yaf_Application::run()= 启动

** 方法

*** =getInstance()=

- 静态方法
- 返回 =Yef_Dispatcher=

示例
#+BEGIN_SRC php
$dispatcher = Yaf_Dispatcher::getInstance();
#+END_SRC

*** =getApplication()=

- 获取 =Yaf_Application= 实例，不过建议使用 =Yaf_Application::app()=

*** =setAppDirectory()=

- 改变 =APPLICATION_PATH= ，从新的路径下加载控制器、视图
- 不会改变自动加载的路径
- 成功返回 =Yaf_Dispatcher= ，失败返回 =FALSE=

#+BEGIN_SRC php
setAppDirectory( string $directory )
    $directory // 绝对路径
#+END_SRC

示例
#+BEGIN_SRC php
$app->getDispatcher()->setAppDirectory('/usr/local/new/application')->getApplication()->run();
#+END_SRC

*** =dispatch()=

- 开始处理流程；
- 一般不需要手动调用此方法， =Yaf_Application::run()= 会自动调用；
- 成功返回 =Yaf_Response_Abstract= 实例，失败会抛出异常；

#+BEGIN_SRC php
dispatch( Yaf_Request_Abstract $request )
#+END_SRC

*** =registerPlugin()=

- 注册一个插件
- 成功返回 =Yaf_Dispatcher= ，失败返回 =FALSE=

#+BEGIN_SRC php
registerPlugin( Yaf_Plugin_Abstract $plugin )
#+END_SRC

示例
#+BEGIN_SRC php
// Bootstrap 类中
public function _initPlugin(Yaf_Dispatcher $dispatcher) {
    $dispatcher->registerPlugin(new SomePlugin());
}
#+END_SRC

*** =getRouter()=

- 获取路由器实例

** 视图引擎方法

- Yaf 采用延迟实例化视图引擎的策略，需要在使用前进行初始化，视图引擎才会被实例化；
- 如果使用自定义视图引擎，需要先调用 =setView()= ，之后才可以进行初始化 =initView()= ；
- Yaf 默认在动作执行完成以后，自动渲染以动作名命名的视图模板文件；

*** =initView()=

- 初始化视图引擎
- 返回 =Yaf_View_Interface=

#+BEGIN_SRC php
initView( string $tpl_dir )
    $tpl_dir // 视图的模板目录的绝对路径
#+END_SRC

示例
#+BEGIN_SRC php
// Bootstrap 类中
public function _initViewParameters(Yaf_Dispatcher $dispatcher) {
    $dispatcher->initView(APPLICATION_PATH . '/views/')->assign('webroot', WEBROOT);
}
#+END_SRC

*** =setView()=

- 设置视图引擎；
- 成功返回 =Yaf_Dispatcher= ，失败返回 =FALSE= ；

#+BEGIN_SRC php
setView( Yaf_View_Interface $view )
#+END_SRC

示例
#+BEGIN_SRC php
// Bootstrap 类中
public function _initSmarty(Yaf_Dispatcher $dispatcher) {
    $smarty = new Smarty_Adapter(null, Yaf_Registry::get('config')->get('smarty'));
    $dispatcher->setView($smarty);
}
#+END_SRC

*** =autoRender()=

- 打开或关闭自动渲染；
- 成功返回 =Yaf_Dispatcher= ，失败返回 =FALSE= ；

#+BEGIN_SRC php
autoRender( boolean $switch )
#+END_SRC

示例
#+BEGIN_SRC php
Yaf_Dispatcher::getInstance()->autoRender(FALSE);
#+END_SRC

*** =disableView()=

- 关闭自动渲染；
- 成功返回 =Yaf_Dispatcher= ，失败返回 =FALSE= ；

示例
#+BEGIN_SRC php
// Controller 类中
if ($this->getRequest()->isXmlHttpRequest()) { // Ajax
    Yaf_Dispatcher::getInstance()->disableView();
}
#+END_SRC

*** =enableView()=

- 打开自动渲染；
- 成功返回 =Yaf_Dispatcher= ，失败返回 =FALSE= ；
** 请求响应方法

*** =getRequest()=

- 返回 =Yaf_Request_Abstract=

*** =setRequest()=

- 设置请求对象；
- 成功返回 =Yaf_Dispatcher= ，失败返回 =FALSE= ；

#+BEGIN_SRC php
setRequest( Yaf_Request_Abstract $request )
#+END_SRC

示例
#+BEGIN_SRC php
$request = new Yaf_Request_Simple('Index', 'Index', 'index');
Yaf_Dispatcher::getInstance()->setRequest($request);
#+END_SRC

*** =returnResponse()=

- 是否返回 =Yaf_Response_Abstract= 对象；
- 如果开启（ =TRUE= ），则响应对象在分发完成后不会自动输出给请求端，而是手动控制输出；
- 成功返回 =Yaf_Dispatcher= ，失败返回 =FALSE= ；

#+BEGIN_SRC php
returnResponse( boolean $switch )
#+END_SRC

示例
#+BEGIN_SRC php
$response = $app->getDispatcher()->returnResponse(TRUE)->getApplication()->run();
$response->response(); // 手动输出响应
#+END_SRC

*** =flushInstantly()=

- 立即输出响应，调用 =Yaf_Controller_Abstract::display()= ，直接输出响应给请求端
- 成功返回 =Yaf_Dispatcher= ，失败返回 =FALSE=

#+BEGIN_SRC php
flushInstantly( boolean $switch )
#+END_SRC

示例
#+BEGIN_SRC php
Yaf_Dispatcher::getInstance()->flushInstantly(TRUE);
#+END_SRC

** 错误处理方法

- 在 =application.throwException= 关闭的情况下，Yaf 会在出错的时候触发错误
- 如果设置了错误处理函数，则会把控制交给错误处理函数处理

错误处理函数
| 必须参数 | 错误代码、错误信息           |
| 可选参数 | 错误文件、错误行、错误上下文 |

*** =setErrorHandler()=

- 设置错误处理函数
- 成功返回 =Yaf_Dispatcher= ，失败返回 =FALSE=

#+BEGIN_SRC php
setErrorHandler( mixed $callback, int $error_code = E_ALL | E_STRICT )
    $callback   // 错误处理函数
    $error_code // 要捕获的错误类型
#+END_SRC

示例
#+BEGIN_SRC php
function myErrorHandler($errno, $errstr, $errfile, $errline) {}
Yaf_Dispatcher::getInstance()->setErrorHandler('myErrorHandler');
#+END_SRC

*** =throwException()=

- 切换出错时是抛出异常，还是触发错误
- 也可以在配置文件中使用 =ap.dispatcher.throwException=$switch=
- 成功返回 =Yaf_Dispatcher= ，失败返回 =FALSE=

#+BEGIN_SRC php
throwException( boolean $switch )
    $switch // TRUE = 抛出异常，FALSE = 触发错误
#+END_SRC

示例
#+BEGIN_SRC php
Yaf_Dispatcher::getInstance()->throwException(FALSE);
#+END_SRC

*** =catchException()=

- 是否启用默认捕获异常机制（在 =ap.dispatcher.throwException= 开启的状态下）
- 如果启用（ =TRUE= ），则在有未捕获异常的时候，会交给 =Error Controller= 的 =Error Action= 处理
- 也可以在配置文件中使用 =ap.dispatcher.catchException=$switch=
- 成功返回 =Yaf_Dispatcher= ，失败返回 =FALSE=

#+BEGIN_SRC php
catchException( boolean $switch )
    $switch
#+END_SRC

示例
#+BEGIN_SRC php
Yaf_Dispatcher::getInstance()->catchException(TRUE);
#+END_SRC
** 默认路由方法

- 设置路由的默认模块、控制器、动作
- 如果在路由结果中不包含控制器信息，则会使用默认模块、控制器、动作作为路由控制器结果

*** =setDefaultModule()=

- 设置路由的默认模块
- 成功返回 =Yaf_Dispatcher= ，失败返回 =FALSE=

#+BEGIN_SRC php
setDefaultModule( string $default_module_name )
    $default_module_name // 首字母大写
#+END_SRC

*** =setDefaultController()=

- 设置路由的默认控制器
- 成功返回 =Yaf_Dispatcher= ，失败返回 =FALSE=

#+BEGIN_SRC php
setDefaultController( string $default_controller_name )
    $default_controller_name // 首字母大写
#+END_SRC

*** =setDefaultAction()=

- 设置路由的默认动作
- 成功返回 =Yaf_Dispatcher= ，失败返回 =FALSE=

#+BEGIN_SRC php
setDefaultAction( string $default_module_name )
    $default_module_name // 首字母大写
#+END_SRC

* 控制器

- =Yaf_Controller_Abstract=

-----

- 一般动作都是定义在 =Yaf_Controller_Abstract= 的子类中的
- 但是有时为了使代码清晰，分离一些大的控制器，可以单独定义 =Yaf_Action_Abstract=
- 实现 =execute()= 方法

** 动作参数

获取方式一
#+BEGIN_SRC php
$name = $this->getRequest()->getParam('name');
#+END_SRC

-----

获取方式二：
- URL = =http://domain.com/index/index/name/a/value/2=
- Request 对象生成两个参数 =name= 和 =value=
- 动作函数的形参与参数同名， =indexAction($name, $value)= ，函数内可以直接获得参数值

** 请求响应方法

*** =getRequest()=

- 获取当前请求 =Yaf_Request_Abstract= 实例

*** =getResponse()=

- 获取当前响应 =Yaf_Response_Abstract= 实例

** 转发重定向方法

*** =forward()=

- 将当前请求转给另外一个动作处理
- 只是登记下要目的地，并不会立即跳转，当前的动作执行完成后才进行新的分发
- 成功返回 =Yaf_Controller_Abstract= ，失败返回 =FALSE=

#+BEGIN_SRC php
forward( string $module, string $controller, string $action, array $params=NULL )
    $module     // 首字母大写，如果为空，则转给当前模块
    $controller // 首字母大写，如果为空，则转给当前控制器
    $action     // 全部小写
    $params     // 附加参数，可通过 Yaf_Request_Abstract::getParam() 获取
#+END_SRC

示例
#+BEGIN_SRC php
if ($user_not_login) {
    $this->forward('login');
}
#+END_SRC

*** =redirect()=

- 重定向请求到新的路径
- 成功返回 =Yaf_Controller_Abstract= ，失败返回 =FALSE=

#+BEGIN_SRC php
redirect( string $url )
#+END_SRC

示例
#+BEGIN_SRC php
if ($user_not_login) {
    $this->redirect('/login/');
}
#+END_SRC

** 视图引擎方法

- Yaf 采用延迟实例化视图引擎的策略，需要在使用前 =initView()= 进行初始化，视图引擎才会被实例化
- 之后就可以直接通过获取 =Yaf_Controller_Abstract::$_view= 来访问当前视图引擎

*** =initView()=

- 初始化视图引擎
- 返回 =Yaf_View_Interface=

示例
#+BEGIN_SRC php
$view = $this->initView();
$this->_view->assign('webroot', 'http://domain.com/');
#+END_SRC

*** =render()=

- 渲染视图模板，返回渲染结果，但不输出
- 是对 =Yaf_View_Interface::render()= 的包装
- 返回 =Yaf_Response_Abstract=

#+BEGIN_SRC php
render( string $action, array $tpl_vars=NULL )
    $action   // 要渲染的动作名
    $tpl_vars // 传递给视图引擎的渲染参数
              // 也可以使用 Yaf_View_Interface::assign()
#+END_SRC

示例
#+BEGIN_SRC php
public funciton init() {
    /* 关闭自动渲染 */
    Yaf_Dispatcher::getInstance()->disableView();
}
public function indexAction() {
    $this->initView();
    echo $this->render('test.phtml');
}
#+END_SRC

*** =display()=

- 渲染视图模板，直接输出渲染结果
- 是对 =Yaf_View_Interface::display()= 的包装
- 返回 =boolean=

#+BEGIN_SRC php
display( string $action, array $tpl_vars=NULL )
    $action   // 要渲染的动作名
    $tpl_vars // 传递给视图引擎的渲染参数
              // 也可以使用 Yaf_View_Interface::assign()
#+END_SRC

示例
#+BEGIN_SRC php
public funciton init() {
    /* 关闭自动渲染 */
    Yaf_Dispatcher::getInstance()->disableView();
}
public function indexAction() {
    $this->initView();
    $this->display('test.phtml', array('name' => 'value'));
}
#+END_SRC

*** =getView()=

- 获取当前的视图引擎 =Yaf_View_Interface=

*** =setViewPath()=

- 更改视图模板目录，之后 =Yaf_Controller_Abstract::render()= 会在新目录下寻找模板文件
- 成功返回 =Yaf_Controller_Abstract= ，失败返回 =FALSE=

#+BEGIN_SRC php
setViewPath( string $view_directory )
    $view_directory // 视图模板目录，绝对路径
#+END_SRC

示例
#+BEGIN_SRC php
$this->setViewPath('/usr/local/www/tpl/');
#+END_SRC

*** =getViewPath()=

- 获取当前的模板目录
- 成功返回模板目录，失败返回 =NULL=

示例
#+BEGIN_SRC php
echo $this->getViewPath();
#+END_SRC
** 其他方法

*** =getModuleName()=

- 获取当前控制器所属的模块名
- 成功返回模块名，失败返回 =NULL=

* 视图

- =Yaf_View_Interface=
- 为了提供可扩展的、可自定的视图引擎而设立的视图引擎接口
- 定义了用在 Yaf 上的视图引擎需要实现的方法

| =render()=        |   |
| =display()=       |   |
| =assign()=        |   |
| =setScriptPath()= |   |
| =getScriptPath()= |   |

-----

- =Yaf_View_Simple=
- Yaf 自带的视图引擎
- 为了追求性能，没有提供类似 Smarty 的多样功能和复杂语法

-----

一个 Smarty 实现
#+BEGIN_SRC php
class Smarty_Adapter implements Yaf_View_Interface
{
    public $_smarty;

    /**
     * Constructor
     *
     * @param string $tmplPath
     * @param array $extraParams
     * @return void
     */
    public function __construct($tmplPath = null, $extraParams = array()) {
        require "Smarty.class.php";
        $this->_smarty = new Smarty;

        if (null !== $tmplPath) {
            $this->setScriptPath($tmplPath);
        }

        foreach ($extraParams as $key => $value) {
            $this->_smarty->$key = $value;
        }
    }

    /**
     * Assign variables to the template
     *
     * Allows setting a specific key to the specified value, OR passing
     * an array of key => value pairs to set en masse.
     *
     * @see __set()
     * @param string|array $spec The assignment strategy to use (key or array of key => value pairs)
     * @param mixed $value (Optional) If assigning a named variable, use this as the value.
     * @return void
     */
    public function assign($spec, $value = null) {
        if (is_array($spec)) {
            $this->_smarty->assign($spec);
            return;
        }

        $this->_smarty->assign($spec, $value);
    }

    /**
     * Processes a template and returns the output.
     *
     * @param string $name The template to process.
     * @return string The output.
     */
    public function render($name) {
        return $this->_smarty->fetch($name);
    }
}
#+END_SRC

* 配置

- =Yaf_Config_Abstract=
- 简化访问、使用配置数据，配置数据可能来自于各种支持等级结构数据存储的媒体
- 实现了 Countable、ArrayAccess、Iterator 接口
- 对象可以使用 =count()= 和 =foreach= ，也可以通过数组方式访问 =Yaf_Config_Abstract= 的元素

-----

- =Yaf_Config_Ini=
- 为存储在 ini 文件的配置数据提供了适配器

-----

- =Yaf_Config_Simple=
- 为存储在 PHP 数组中的配置数据提供了适配器



* 资源

1. [[http://php.net/manual/en/book.yaf.php][Yet Another Framework]]
