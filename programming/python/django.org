#+SETUPFILE: ../../styles/readtheorg.setup
#+TITLE: Django

* 组成
** App

Project
- a project is a collection of configuration and apps for a particular website
- a project can contain multiple apps

App
- an app is a Web application that does something
- an app can be in multiple projects, can be packaged and distributed for reuse

配置
#+BEGIN_SRC python
# <site>/<site>/settings.py

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    '<app>.apps.<App>Config',
]
#+END_SRC

** 目录结构

#+BEGIN_SRC sh
# django-admin startproject <site>
<site>/             # 容器，可以任意命名
    manage.py       # 操作 Django 项目的命令行工具
    <site>/         # 项目的 Python 包，用于加载，eg. import <site>.urls
        __init__.py # 标记 Python 包的空文件
        settings.py # 设置
        urls.py     # URL 声明
        wsgi.py     # WSGI (Web Server Gateway Interface) web server 入口

# python manage.py startapp <app>
<site>/
    manage.py
    <app>/
        __init__.py
        admin.py
        apps.py
        migrations/
            __init__.py
        models.py
        tests.py
        views.py
    <site>/
        ...
#+END_SRC

* Route
** 示例

为 =http://127.0.0.1:8000/<app>/= 设置路由

#+BEGIN_SRC python
# <site>/<site>/urls.py

from django.conf.urls import include, url
from django.contrib import admin

urlpatterns = [ # 按顺序将 URL 匹配列表中的正则
    url(r'^<app>/', include('<app>.urls')), # include() 引用 URL 配置
                                            # 去除正则匹配的部分，剩余（<app>/ 之后的）传递给 include()
    url(r'^admin/', admin.site.urls),       # admin.site.urls 不需要 include()
]
#+END_SRC

#+BEGIN_SRC python
# <site>/<app>/urls.py

from django.conf.urls import url
from . import views

urlpatterns = [
    url(r'^$', views.index, name='index'),
]
#+END_SRC

* Model
** 方法

| =__str__()= | 输出为字符串 |
|-------------+--------------|
|             |              |

** 示例

定义
#+BEGIN_SRC python
# <site>/<app>/models.py

from django.db import models

class <Model_1>(models.Model): # 继承 django.db.models.Model
    <name_1> = models.CharField(max_length=<n>) # 长度将用于数据表 schema 和数据验证
    <name_2> = models.DateTimeField('<comment>')

class <Model_2>(models.Model):
    <name_1> = models.ForeignKey(<Model_1>, on_delete=models.CASCADE)
    <name_2> = models.IntegerField(default=<n>)
#+END_SRC

配置
#+BEGIN_SRC python
# <site>/<site>/settings.py

INSTALLED_APPS = [
    ...
    '<app>.apps.<App>Config',
]
#+END_SRC

生成数据表
#+BEGIN_SRC sh
python manage.py makemigrations <app>
python manage.py migrate
#+END_SRC

使用
#+BEGIN_SRC python
# 列出所有记录
<Model>.objects.all()

# 新增记录
obj = <Model>(<name_1>=..., <name_2>=...)
obj.save()

# 读取属性值
obj.<name_1>

# 修改属性值
obj.<name_2> = ...
obj.save()
#+END_SRC

* View
** 示例

#+BEGIN_SRC python
# <site>/<app>/views.py

from django.http import HttpResponse

def index(request):
    return HttpResponse("Hello, world.")
#+END_SRC

* 数据库
** 配置
#+BEGIN_SRC python
# <site>/<site>/settings.py

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',       # django.db.backends.sqlite3
                                                      # django.db.backends.postgresql
                                                      # django.db.backends.mysql
                                                      # django.db.backends.oracle
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), # 数据库名
                                                      # 使用 SQLite 时为一个绝对路径
        'HOST':
        'USER':
        'PASSWORD':
    }
}
#+END_SRC

** 命令行

安装 SQLite3
#+BEGIN_SRC sh
sudo apt-get install sqlite3
#+END_SRC

运行
#+BEGIN_SRC sh
# <site>/
python manage.py dbshell
#+END_SRC

* Admin
** 示例

#+BEGIN_SRC python
# <site>/<app>/admin.py

from django.contrib import admin
from .models import <Model>

admin.site.register(<Model>)
#+END_SRC

* Django 库
** =django.conf=
*** =django.conf.urls=

#+BEGIN_SRC python
def url(
    regex
,   view        # 调用的 view 函数，第一个参数为 HttpRequest 对象
,   kwargs=None # keyword arguments
,   name=None   # 用于引用此 URL 的唯一名称，如在模板中
,   prefix=''
)
#+END_SRC

** =django.db=
*** =django.db.models=

| =BooleanField()=  |   |
|-------------------+---|
| =CharField()=     |   |
|-------------------+---|
| =DateField()=     |   |
|-------------------+---|
| =DateTimeField()= |   |
|-------------------+---|
| =DecimalField()=  |   |
|-------------------+---|
| =EmailField()=    |   |
|-------------------+---|
| =FileField()=     |   |
|-------------------+---|
| =FloatField()=    |   |
|-------------------+---|
| =IntegerField()=  |   |
|-------------------+---|
| =TextField()=     |   |
|-------------------+---|
| =TimeField()=     |   |

*** =django.db.models.Model=

#+BEGIN_SRC python
def save(
    self
,   force_insert=False
,   force_update=False
,   using=None
,   update_fields=None
)
#+END_SRC

*** =django.db.models.Manager=

Manager
- Django adds a Manager with the name =objects= to every model class by default
- to use a name other than =objects=, rename it on a per-model basis
  + define a class attribute of type =models.Manager()= on that model: =<manager> = models.Manager()=
  + then use =<Model>.<manager>.all()= instead of =<Model>.objects.all()=

返回 =QuerySet= 的方法
| =all()=      | Returns a =QuerySet= of all the objects in the database                  |
|--------------+--------------------------------------------------------------------------|
| =exclude()=  | Returns a =QuerySet= of objects NOT matching the given lookup parameters |
|--------------+--------------------------------------------------------------------------|
| =filter()=   | Returns a =QuerySet= of objects matching the given lookup parameters     |
|--------------+--------------------------------------------------------------------------|
| =order_by()= |                                                                          |
|--------------+--------------------------------------------------------------------------|
| =distinct()= |                                                                          |

不返回 =QuerySet= 的方法
| =get()=    | Returns one object matching the given lookup parameters                   |
|            | - will raise =DoesNotExist= exception if no results                       |
|            | - will raise =MultipleObjectsReturned= exception if more than one results |
|------------+---------------------------------------------------------------------------|
| =count()=  |                                                                           |
|------------+---------------------------------------------------------------------------|
| =exists()= |                                                                           |
|------------+---------------------------------------------------------------------------|
| =first()=  |                                                                           |
|------------+---------------------------------------------------------------------------|
| =last()=   |                                                                           | 

| =create()= |   |
|------------+---|
| =delete()= |   |
|------------+---|
| =update()= |   |

*** =django.db.models.query.QuerySet=

#+BEGIN_SRC python
# Creating a QuerySet doesn't involve database activity
q = Entry.objects.filter(headline__startswith="What")
q = q.filter(pub_date__lte=datetime.date.today())
q = q.exclude(body_text__icontains="food")

# Django won't run the query until the QuerySet is evaluated
print(q)
#+END_SRC

** =django.utils=
*** =django.utils.timezone=

| =now()= |   |
|---------+---|
|         |   |

* 命令行
** =django-admin=

=startproject=
#+BEGIN_SRC sh
# <site>/../
django-admin startproject <site> # 避免冲突：django，test 等
#+END_SRC

** =manage.py=

#+BEGIN_SRC sh
python manage.py <cmd>

<cmd> # 项目
    startapp <app>
    check
    createsuperuser

<cmd> # 运行
    runserver [<ip>:<port>] # IP 默认为 127.0.0.1，设置为 0.0.0.0 监听所有公共 IP
                            # 端口默认为 8000
    shell

<cmd> # 数据库
    dbshell
    makemigrations <app>   # 创建一个 migration
    sqlmigrate <app> <seq> # 读取指定的 migration，返回 SQL
    migrate                # 根据配置中的 INSTALLED_APPS 创建数据库、表
                           # 执行所有未执行的 migration
#+END_SRC

* 安装

安装（Python 2）
#+BEGIN_SRC sh
# pip
sudo apt-get install python-pip

# Django
sudo pip install django

# 验证
python -c "import django; print(django.get_version())"
#+END_SRC

卸载（Python 2）
#+BEGIN_SRC sh
# Django
sudo pip uninstall django

# pip
sudo apt-get remove python-pip
#+END_SRC

安装（Python 3）
#+BEGIN_SRC sh
# Python
sudo apt-get install package
sudo apt-get install python3

# pip
sudo apt-get install python3-pip

# Django
sudo pip3 install django

# 验证
python3 -c "import django; print(django.get_version())"
#+END_SRC

卸载（Python 3）
#+BEGIN_SRC sh
# Django
sudo pip3 uninstall django

# pip
sudo apt-get remove python3-pip
#+END_SRC
